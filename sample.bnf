IF     => identity ::= "if"*
ELSE   => identity ::= "else"*
FOR    => identity ::= "for"*
IN     => identity ::= "in"*
WHILE  => identity ::= "while"*
STRUCT => identity ::= "struct"*
RETURN => identity ::= "return"*

DOUBLECOLON => identity ::= "::"*
SEMICOLON   => identity ::= ";"*
COLON       => identity ::= ":"*
DOT         => identity ::= "\\."*
COMMA       => identity ::= ","*

OP => indent   ::= "\\("*
CP => unindent ::= "\\)"*
OB => indent   ::= "\\["*
CB => unindent ::= "\\]"*
OC => indent   ::= "\\{"*
CC => unindent ::= "\\}"*

ASS_IGN => identity ::= "="*
ASS_ADD => identity ::= "\\+="*
ASS_SUB => identity ::= "-="*
ASS_MUL => identity ::= "\\*="*
ASS_DIV => identity ::= "/="*
ASS_SHL => identity ::= "<<="*
ASS_SHR => identity ::= ">>="*

BIT_LEFT  => identity ::= "<<"*
BIT_RIGHT => identity ::= ">>"*

CMP_IE => identity ::= "<=>"*

CMP_LT => identity ::= "<"*
CMP_GT => identity ::= ">"*
CMP_LE => identity ::= "<="*
CMP_GE => identity ::= ">="*

CMP_EQ => identity ::= "=="*
CMP_NE => identity ::= "!="*

BIT_AND => identity ::= "&"*
BIT_XOR => identity ::= "\\^"*
BIT_OR  => identity ::= "\\|"*

LOG_AND => identity ::= "&&"*
LOG_OR  => identity ::= "\\|\\|"*

MATH_ADD => identity ::= "\\+"*
MATH_SUB => identity ::= "-"*

MATH_MUL => identity ::= "\\*"*
MATH_DIV => identity ::= "/"*
MATH_MOD => identity ::= "%"*

DEC => identity ::= "--"*
INC => identity ::= "\\+\\+"*

IDENTIFIER => identity ::= r"\w+"*

LIT_S8  => identity ::= "u8\"([^\\\"]|\\.)*\""*
LIT_S16 => identity ::= "u16\"([^\\\"]|\\.)*\""*
LIT_S32 => identity ::= "u32\"([^\\\"]|\\.)*\""*

LIT_C8  => identity ::= "u8\'([^\\\']|\\.)*\'"*
LIT_C16 => identity ::= "u16\'([^\\\']|\\.)*\'"*
LIT_C32 => identity ::= "u32\'([^\\\']|\\.)*\'"*

LIT_I8  => identity ::= r"\d+i8"*
LIT_I16 => identity ::= r"\d+i16"*
LIT_I32 => identity ::= r"\d+i32"*
LIT_I64 => identity ::= r"\d+i64"*

LIT_U8  => identity ::= r"\d+u8"*
LIT_U16 => identity ::= r"\d+u16"*
LIT_U32 => identity ::= r"\d+u32"*
LIT_U64 => identity ::= r"\d+u64"*

LIT_F32 => identity ::= r"(\d+.\d+|\d+.|.\d+|\d+)f32"*
LIT_F64 => identity ::= r"(\d+.\d+|\d+.|.\d+|\d+)f64"*

<program> => finalize_program ::= <expression_list>*

<expression_list> => expand_expression_list ::= <expression_list>* <expression>*
<expression_list> => make_expression_list   ::= <expression>*

<expression> => make_statement ::= <assignment>* SEMICOLON*
<expression> => make_statement ::= <assignment>* COMMA*
<expression> => make_statement ::= <assignment>*

# Assignment operators ::= += -= /= *= >>= <<=
<assignment> => make_binary_expression ::= <expression>* ASS_IGN* <mapping>*
<assignment> => make_binary_expression ::= <expression>* ASS_ADD* <mapping>*
<assignment> => make_binary_expression ::= <expression>* ASS_SUB* <mapping>*
<assignment> => make_binary_expression ::= <expression>* ASS_MUL* <mapping>*
<assignment> => make_binary_expression ::= <expression>* ASS_DIV* <mapping>*
<assignment> => make_binary_expression ::= <expression>* ASS_SHL* <mapping>*
<assignment> => make_binary_expression ::= <expression>* ASS_SHR* <mapping>*
<assignment> => identity ::= <mapping>*

<mapping> => make_binary_expression ::= <mapping>* COLON* <bit_shift>*
<mapping> => identity ::= <bit_shift>*

# Bitwise << >>
<bit_shift> => make_binary_expression ::= <bit_shift>* BIT_LEFT*  <spaceship>*
<bit_shift> => make_binary_expression ::= <bit_shift>* BIT_RIGHT* <spaceship>*
<bit_shift> => identity ::= <spaceship>*

# Spaceship <->
<spaceship> => make_binary_expression ::= <spaceship>* CMP_IE* <comparison>*
<spaceship> => identity ::= <comparison>*

# Normal comparison < > <= >=
<comparison> => make_binary_expression ::= <comparison>* CMP_LT* <equality>*
<comparison> => make_binary_expression ::= <comparison>* CMP_GT* <equality>*
<comparison> => make_binary_expression ::= <comparison>* CMP_LE* <equality>*
<comparison> => make_binary_expression ::= <comparison>* CMP_GE* <equality>*
<comparison> => identity ::= <equality>*

# Equality ::== !=
<equality> => make_binary_expression ::= <equality>* CMP_EQ* <bit_and>*
<equality> => make_binary_expression ::= <equality>* CMP_NE* <bit_and>*
<equality> => identity ::= <bit_and>*

# Bitwise &
<bit_and> => make_binary_expression ::= <bit_and>* BIT_AND* <bit_xor>*
<bit_and> => identity ::= <bit_xor>*

# Bitwise ^
<bit_xor> => make_binary_expression ::= <bit_xor>* BIT_XOR* <bit_or>*
<bit_xor> => identity ::= <bit_or>*

# Bitwise |
<bit_or> => make_binary_expression ::= <bit_or>* BIT_OR* <log_and>*
<bit_or> => identity ::= <log_and>*

# Logical &&
<log_and> => make_binary_expression ::= <log_and>* LOG_AND* <log_or>*
<log_and> => identity ::= <log_or>*

# Logical ||
<log_or> => make_binary_expression ::= <log_or>* LOG_OR* <sum>*
<log_or> => identity ::= <sum>*

# Arithmetic + -
<sum> => make_binary_expression ::= <sum>* MATH_ADD* <product>*
<sum> => make_binary_expression ::= <sum>* MATH_SUB* <product>*
<sum> => identity ::= <product>*

# Arithmetic * / %
<product> => make_binary_expression ::= <product>* MATH_MUL* <base_expression>*
<product> => make_binary_expression ::= <product>* MATH_DIV* <base_expression>*
<product> => make_binary_expression ::= <product>* MATH_MOD* <base_expression>*
<product> => identity ::= <base_expression>*

<paren_block> => make_paren_block ::= OP <expression_list>* CP
<paren_block> => make_paren_block ::= OP CP

<brace_block> => make_brace_block ::= OB <expression_list>* CB
<brace_block> => make_brace_block ::= OB CB

<curly_block> => make_curly_block ::= OC <expression_list>* CC
<curly_block> => make_curly_block ::= OC CC

<base_expression> => identity ::= IF*
<base_expression> => identity ::= ELSE*
<base_expression> => identity ::= FOR*
<base_expression> => identity ::= IN*
<base_expression> => identity ::= WHILE*
<base_expression> => identity ::= STRUCT*
<base_expression> => identity ::= RETURN*

<base_expression> => identity ::= IDENTIFIER*

<base_expression> => identity ::= LIT_S8*
<base_expression> => identity ::= LIT_S16*
<base_expression> => identity ::= LIT_S32*

<base_expression> => identity ::= LIT_C8*
<base_expression> => identity ::= LIT_C16*
<base_expression> => identity ::= LIT_C32*

<base_expression> => identity ::= LIT_I8*
<base_expression> => identity ::= LIT_I16*
<base_expression> => identity ::= LIT_I32*
<base_expression> => identity ::= LIT_I64*

<base_expression> => identity ::= LIT_U8*
<base_expression> => identity ::= LIT_U16*
<base_expression> => identity ::= LIT_U32*
<base_expression> => identity ::= LIT_U64*

<base_expression> => identity ::= LIT_F32*
<base_expression> => identity ::= LIT_F64*

# Unary * & + -
<base_expression> => make_prefix_expression ::= BIT_AND*  <base_expression>*
<base_expression> => make_prefix_expression ::= MATH_ADD* <base_expression>*
<base_expression> => make_prefix_expression ::= MATH_SUB* <base_expression>*
<base_expression> => make_prefix_expression ::= MATH_MUL* <base_expression>*

# Post and pre increment/decrement
<base_expression> => make_prefix_expression  ::= INC* <base_expression>*
<base_expression> => make_prefix_expression  ::= DEC* <base_expression>*
<base_expression> => make_postfix_expression ::= <base_expression>* INC*
<base_expression> => make_postfix_expression ::= <base_expression>* DEC*

<base_expression> => make_binary_expression ::= <base_expression>* DOT*         IDENTIFIER*
<base_expression> => make_binary_expression ::= <base_expression>* DOUBLECOLON* IDENTIFIER*

# Function call stuff () [] {}
<base_expression> => make_block_expression ::= <base_expression>* <paren_block>*
<base_expression> => make_block_expression ::= <base_expression>* <brace_block>*
<base_expression> => make_block_expression ::= <base_expression>* <curly_block>*

# Parenthesized expression ()
<base_expression> => identity ::= OP <expression>* CP